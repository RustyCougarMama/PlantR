//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlantRTests.PlantRRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Plant", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantRTests.PlantRRef.PersonalPlant))]
    public partial class Plant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SDaysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CName {
            get {
                return this.CNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CNameField, value) != true)) {
                    this.CNameField = value;
                    this.RaisePropertyChanged("CName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageURL {
            get {
                return this.ImageURLField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageURLField, value) != true)) {
                    this.ImageURLField = value;
                    this.RaisePropertyChanged("ImageURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SDays {
            get {
                return this.SDaysField;
            }
            set {
                if ((this.SDaysField.Equals(value) != true)) {
                    this.SDaysField = value;
                    this.RaisePropertyChanged("SDays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonalPlant", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ.Model")]
    [System.SerializableAttribute()]
    public partial class PersonalPlant : PlantRTests.PlantRRef.Plant {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Id1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastWateredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NextWateredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WDurationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AId {
            get {
                return this.AIdField;
            }
            set {
                if ((this.AIdField.Equals(value) != true)) {
                    this.AIdField = value;
                    this.RaisePropertyChanged("AId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Id")]
        public int Id1 {
            get {
                return this.Id1Field;
            }
            set {
                if ((this.Id1Field.Equals(value) != true)) {
                    this.Id1Field = value;
                    this.RaisePropertyChanged("Id1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastWatered {
            get {
                return this.LastWateredField;
            }
            set {
                if ((this.LastWateredField.Equals(value) != true)) {
                    this.LastWateredField = value;
                    this.RaisePropertyChanged("LastWatered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NName {
            get {
                return this.NNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NNameField, value) != true)) {
                    this.NNameField = value;
                    this.RaisePropertyChanged("NName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NextWatered {
            get {
                return this.NextWateredField;
            }
            set {
                if ((this.NextWateredField.Equals(value) != true)) {
                    this.NextWateredField = value;
                    this.RaisePropertyChanged("NextWatered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WDuration {
            get {
                return this.WDurationField;
            }
            set {
                if ((this.WDurationField.Equals(value) != true)) {
                    this.WDurationField = value;
                    this.RaisePropertyChanged("WDuration");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlantRRef.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        PlantRTests.PlantRRef.CompositeType GetDataUsingDataContract(PlantRTests.PlantRRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.CompositeType> GetDataUsingDataContractAsync(PlantRTests.PlantRRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlant", ReplyAction="http://tempuri.org/IService1/AddPlantResponse")]
        PlantRTests.PlantRRef.PersonalPlant AddPlant(int plantID, int accID, int daysWater, string nName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlant", ReplyAction="http://tempuri.org/IService1/AddPlantResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> AddPlantAsync(int plantID, int accID, int daysWater, string nName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlants", ReplyAction="http://tempuri.org/IService1/GetAllPlantsResponse")]
        void GetAllPlants();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlants", ReplyAction="http://tempuri.org/IService1/GetAllPlantsResponse")]
        System.Threading.Tasks.Task GetAllPlantsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountPlants", ReplyAction="http://tempuri.org/IService1/GetAccountPlantsResponse")]
        void GetAccountPlants(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountPlants", ReplyAction="http://tempuri.org/IService1/GetAccountPlantsResponse")]
        System.Threading.Tasks.Task GetAccountPlantsAsync(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlant", ReplyAction="http://tempuri.org/IService1/GetPlantResponse")]
        PlantRTests.PlantRRef.Plant GetPlant(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlant", ReplyAction="http://tempuri.org/IService1/GetPlantResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Plant> GetPlantAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLastPP", ReplyAction="http://tempuri.org/IService1/GetLastPPResponse")]
        PlantRTests.PlantRRef.PersonalPlant GetLastPP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLastPP", ReplyAction="http://tempuri.org/IService1/GetLastPPResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> GetLastPPAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : PlantRTests.PlantRRef.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<PlantRTests.PlantRRef.IService1>, PlantRTests.PlantRRef.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public PlantRTests.PlantRRef.CompositeType GetDataUsingDataContract(PlantRTests.PlantRRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.CompositeType> GetDataUsingDataContractAsync(PlantRTests.PlantRRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public PlantRTests.PlantRRef.PersonalPlant AddPlant(int plantID, int accID, int daysWater, string nName) {
            return base.Channel.AddPlant(plantID, accID, daysWater, nName);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> AddPlantAsync(int plantID, int accID, int daysWater, string nName) {
            return base.Channel.AddPlantAsync(plantID, accID, daysWater, nName);
        }
        
        public void GetAllPlants() {
            base.Channel.GetAllPlants();
        }
        
        public System.Threading.Tasks.Task GetAllPlantsAsync() {
            return base.Channel.GetAllPlantsAsync();
        }
        
        public void GetAccountPlants(int accID) {
            base.Channel.GetAccountPlants(accID);
        }
        
        public System.Threading.Tasks.Task GetAccountPlantsAsync(int accID) {
            return base.Channel.GetAccountPlantsAsync(accID);
        }
        
        public PlantRTests.PlantRRef.Plant GetPlant(int ID) {
            return base.Channel.GetPlant(ID);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Plant> GetPlantAsync(int ID) {
            return base.Channel.GetPlantAsync(ID);
        }
        
        public PlantRTests.PlantRRef.PersonalPlant GetLastPP() {
            return base.Channel.GetLastPP();
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> GetLastPPAsync() {
            return base.Channel.GetLastPPAsync();
        }
    }
}
