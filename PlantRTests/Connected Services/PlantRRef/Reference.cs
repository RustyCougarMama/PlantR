//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlantRTests.PlantRRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonalPlant", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ.DataAccess")]
    [System.SerializableAttribute()]
    public partial class PersonalPlant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PlantRTests.PlantRRef.Account AccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PlantRTests.PlantRRef.Plant PlantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int aidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime lastwateredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime nextwateredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int pidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int wdurationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PlantRTests.PlantRRef.Account Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PlantRTests.PlantRRef.Plant Plant {
            get {
                return this.PlantField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantField, value) != true)) {
                    this.PlantField = value;
                    this.RaisePropertyChanged("Plant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int aid {
            get {
                return this.aidField;
            }
            set {
                if ((this.aidField.Equals(value) != true)) {
                    this.aidField = value;
                    this.RaisePropertyChanged("aid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime lastwatered {
            get {
                return this.lastwateredField;
            }
            set {
                if ((this.lastwateredField.Equals(value) != true)) {
                    this.lastwateredField = value;
                    this.RaisePropertyChanged("lastwatered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime nextwatered {
            get {
                return this.nextwateredField;
            }
            set {
                if ((this.nextwateredField.Equals(value) != true)) {
                    this.nextwateredField = value;
                    this.RaisePropertyChanged("nextwatered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nname {
            get {
                return this.nnameField;
            }
            set {
                if ((object.ReferenceEquals(this.nnameField, value) != true)) {
                    this.nnameField = value;
                    this.RaisePropertyChanged("nname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int pid {
            get {
                return this.pidField;
            }
            set {
                if ((this.pidField.Equals(value) != true)) {
                    this.pidField = value;
                    this.RaisePropertyChanged("pid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int wduration {
            get {
                return this.wdurationField;
            }
            set {
                if ((this.wdurationField.Equals(value) != true)) {
                    this.wdurationField = value;
                    this.RaisePropertyChanged("wduration");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ.DataAccess")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PlantRTests.PlantRRef.PersonalPlant[] PersonalPlantsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PlantRTests.PlantRRef.PersonalPlant[] PersonalPlants {
            get {
                return this.PersonalPlantsField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalPlantsField, value) != true)) {
                    this.PersonalPlantsField = value;
                    this.RaisePropertyChanged("PersonalPlants");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Plant", Namespace="http://schemas.datacontract.org/2004/07/PlantRServ.DataAccess")]
    [System.SerializableAttribute()]
    public partial class Plant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PlantRTests.PlantRRef.PersonalPlant[] PersonalPlantsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string imgurlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sdaysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PlantRTests.PlantRRef.PersonalPlant[] PersonalPlants {
            get {
                return this.PersonalPlantsField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalPlantsField, value) != true)) {
                    this.PersonalPlantsField = value;
                    this.RaisePropertyChanged("PersonalPlants");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cname {
            get {
                return this.cnameField;
            }
            set {
                if ((object.ReferenceEquals(this.cnameField, value) != true)) {
                    this.cnameField = value;
                    this.RaisePropertyChanged("cname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string imgurl {
            get {
                return this.imgurlField;
            }
            set {
                if ((object.ReferenceEquals(this.imgurlField, value) != true)) {
                    this.imgurlField = value;
                    this.RaisePropertyChanged("imgurl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lname {
            get {
                return this.lnameField;
            }
            set {
                if ((object.ReferenceEquals(this.lnameField, value) != true)) {
                    this.lnameField = value;
                    this.RaisePropertyChanged("lname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int sdays {
            get {
                return this.sdaysField;
            }
            set {
                if ((this.sdaysField.Equals(value) != true)) {
                    this.sdaysField = value;
                    this.RaisePropertyChanged("sdays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlantRRef.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        PlantRTests.PlantRRef.CompositeType GetDataUsingDataContract(PlantRTests.PlantRRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.CompositeType> GetDataUsingDataContractAsync(PlantRTests.PlantRRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPersonalPlant", ReplyAction="http://tempuri.org/IService1/AddPersonalPlantResponse")]
        PlantRTests.PlantRRef.PersonalPlant AddPersonalPlant(int plantID, int accID, int daysWater, string nName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPersonalPlant", ReplyAction="http://tempuri.org/IService1/AddPersonalPlantResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> AddPersonalPlantAsync(int plantID, int accID, int daysWater, string nName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindPersonalPlant", ReplyAction="http://tempuri.org/IService1/FindPersonalPlantResponse")]
        PlantRTests.PlantRRef.PersonalPlant FindPersonalPlant(int ppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindPersonalPlant", ReplyAction="http://tempuri.org/IService1/FindPersonalPlantResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> FindPersonalPlantAsync(int ppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlants", ReplyAction="http://tempuri.org/IService1/GetAllPlantsResponse")]
        PlantRTests.PlantRRef.Plant[] GetAllPlants();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlants", ReplyAction="http://tempuri.org/IService1/GetAllPlantsResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Plant[]> GetAllPlantsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountPlants", ReplyAction="http://tempuri.org/IService1/GetAccountPlantsResponse")]
        PlantRTests.PlantRRef.PersonalPlant[] GetAccountPlants(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountPlants", ReplyAction="http://tempuri.org/IService1/GetAccountPlantsResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant[]> GetAccountPlantsAsync(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlant", ReplyAction="http://tempuri.org/IService1/GetPlantResponse")]
        PlantRTests.PlantRRef.Plant GetPlant(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlant", ReplyAction="http://tempuri.org/IService1/GetPlantResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Plant> GetPlantAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLastPP", ReplyAction="http://tempuri.org/IService1/GetLastPPResponse")]
        PlantRTests.PlantRRef.PersonalPlant GetLastPP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLastPP", ReplyAction="http://tempuri.org/IService1/GetLastPPResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> GetLastPPAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePersonalPlant", ReplyAction="http://tempuri.org/IService1/RemovePersonalPlantResponse")]
        bool RemovePersonalPlant(int ppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePersonalPlant", ReplyAction="http://tempuri.org/IService1/RemovePersonalPlantResponse")]
        System.Threading.Tasks.Task<bool> RemovePersonalPlantAsync(int ppID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAccount", ReplyAction="http://tempuri.org/IService1/AddAccountResponse")]
        PlantRTests.PlantRRef.Account AddAccount(string userName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAccount", ReplyAction="http://tempuri.org/IService1/AddAccountResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account> AddAccountAsync(string userName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindAccount", ReplyAction="http://tempuri.org/IService1/FindAccountResponse")]
        PlantRTests.PlantRRef.Account FindAccount(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindAccount", ReplyAction="http://tempuri.org/IService1/FindAccountResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account> FindAccountAsync(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllAccounts", ReplyAction="http://tempuri.org/IService1/GetAllAccountsResponse")]
        PlantRTests.PlantRRef.Account[] GetAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllAccounts", ReplyAction="http://tempuri.org/IService1/GetAllAccountsResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account[]> GetAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveAccount", ReplyAction="http://tempuri.org/IService1/RemoveAccountResponse")]
        bool RemoveAccount(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveAccount", ReplyAction="http://tempuri.org/IService1/RemoveAccountResponse")]
        System.Threading.Tasks.Task<bool> RemoveAccountAsync(int accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLastAccount", ReplyAction="http://tempuri.org/IService1/GetLastAccountResponse")]
        PlantRTests.PlantRRef.Account GetLastAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLastAccount", ReplyAction="http://tempuri.org/IService1/GetLastAccountResponse")]
        System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account> GetLastAccountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : PlantRTests.PlantRRef.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<PlantRTests.PlantRRef.IService1>, PlantRTests.PlantRRef.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public PlantRTests.PlantRRef.CompositeType GetDataUsingDataContract(PlantRTests.PlantRRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.CompositeType> GetDataUsingDataContractAsync(PlantRTests.PlantRRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public PlantRTests.PlantRRef.PersonalPlant AddPersonalPlant(int plantID, int accID, int daysWater, string nName) {
            return base.Channel.AddPersonalPlant(plantID, accID, daysWater, nName);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> AddPersonalPlantAsync(int plantID, int accID, int daysWater, string nName) {
            return base.Channel.AddPersonalPlantAsync(plantID, accID, daysWater, nName);
        }
        
        public PlantRTests.PlantRRef.PersonalPlant FindPersonalPlant(int ppID) {
            return base.Channel.FindPersonalPlant(ppID);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> FindPersonalPlantAsync(int ppID) {
            return base.Channel.FindPersonalPlantAsync(ppID);
        }
        
        public PlantRTests.PlantRRef.Plant[] GetAllPlants() {
            return base.Channel.GetAllPlants();
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Plant[]> GetAllPlantsAsync() {
            return base.Channel.GetAllPlantsAsync();
        }
        
        public PlantRTests.PlantRRef.PersonalPlant[] GetAccountPlants(int accID) {
            return base.Channel.GetAccountPlants(accID);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant[]> GetAccountPlantsAsync(int accID) {
            return base.Channel.GetAccountPlantsAsync(accID);
        }
        
        public PlantRTests.PlantRRef.Plant GetPlant(int ID) {
            return base.Channel.GetPlant(ID);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Plant> GetPlantAsync(int ID) {
            return base.Channel.GetPlantAsync(ID);
        }
        
        public PlantRTests.PlantRRef.PersonalPlant GetLastPP() {
            return base.Channel.GetLastPP();
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.PersonalPlant> GetLastPPAsync() {
            return base.Channel.GetLastPPAsync();
        }
        
        public bool RemovePersonalPlant(int ppID) {
            return base.Channel.RemovePersonalPlant(ppID);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePersonalPlantAsync(int ppID) {
            return base.Channel.RemovePersonalPlantAsync(ppID);
        }
        
        public PlantRTests.PlantRRef.Account AddAccount(string userName, string email, string password) {
            return base.Channel.AddAccount(userName, email, password);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account> AddAccountAsync(string userName, string email, string password) {
            return base.Channel.AddAccountAsync(userName, email, password);
        }
        
        public PlantRTests.PlantRRef.Account FindAccount(int accID) {
            return base.Channel.FindAccount(accID);
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account> FindAccountAsync(int accID) {
            return base.Channel.FindAccountAsync(accID);
        }
        
        public PlantRTests.PlantRRef.Account[] GetAllAccounts() {
            return base.Channel.GetAllAccounts();
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account[]> GetAllAccountsAsync() {
            return base.Channel.GetAllAccountsAsync();
        }
        
        public bool RemoveAccount(int accID) {
            return base.Channel.RemoveAccount(accID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAccountAsync(int accID) {
            return base.Channel.RemoveAccountAsync(accID);
        }
        
        public PlantRTests.PlantRRef.Account GetLastAccount() {
            return base.Channel.GetLastAccount();
        }
        
        public System.Threading.Tasks.Task<PlantRTests.PlantRRef.Account> GetLastAccountAsync() {
            return base.Channel.GetLastAccountAsync();
        }
    }
}
